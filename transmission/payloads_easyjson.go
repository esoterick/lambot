// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package transmission

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson905adf85DecodeGithubComEsoterickLambotTransmission(in *jlexer.Lexer, out *TorrentsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "arguments":
			(out.Arguments).UnmarshalEasyJSON(in)
		case "result":
			out.Result = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson905adf85EncodeGithubComEsoterickLambotTransmission(out *jwriter.Writer, in TorrentsResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"arguments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Arguments).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Result))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TorrentsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson905adf85EncodeGithubComEsoterickLambotTransmission(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TorrentsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson905adf85EncodeGithubComEsoterickLambotTransmission(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TorrentsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson905adf85DecodeGithubComEsoterickLambotTransmission(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TorrentsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson905adf85DecodeGithubComEsoterickLambotTransmission(l, v)
}
func easyjson905adf85DecodeGithubComEsoterickLambotTransmission1(in *jlexer.Lexer, out *TorrentArguments) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "torrents":
			if in.IsNull() {
				in.Skip()
				out.Torrents = nil
			} else {
				in.Delim('[')
				if out.Torrents == nil {
					if !in.IsDelim(']') {
						out.Torrents = make([]Torrent, 0, 1)
					} else {
						out.Torrents = []Torrent{}
					}
				} else {
					out.Torrents = (out.Torrents)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Torrent
					(v1).UnmarshalEasyJSON(in)
					out.Torrents = append(out.Torrents, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson905adf85EncodeGithubComEsoterickLambotTransmission1(out *jwriter.Writer, in TorrentArguments) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"torrents\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Torrents == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Torrents {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TorrentArguments) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson905adf85EncodeGithubComEsoterickLambotTransmission1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TorrentArguments) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson905adf85EncodeGithubComEsoterickLambotTransmission1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TorrentArguments) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson905adf85DecodeGithubComEsoterickLambotTransmission1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TorrentArguments) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson905adf85DecodeGithubComEsoterickLambotTransmission1(l, v)
}
func easyjson905adf85DecodeGithubComEsoterickLambotTransmission2(in *jlexer.Lexer, out *Torrent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "status":
			out.Status = int(in.Int())
		case "rateDownload":
			out.RateDownload = int(in.Int())
		case "rateUpload":
			out.RateUpload = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson905adf85EncodeGithubComEsoterickLambotTransmission2(out *jwriter.Writer, in Torrent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"rateDownload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.RateDownload))
	}
	{
		const prefix string = ",\"rateUpload\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.RateUpload))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Torrent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson905adf85EncodeGithubComEsoterickLambotTransmission2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Torrent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson905adf85EncodeGithubComEsoterickLambotTransmission2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Torrent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson905adf85DecodeGithubComEsoterickLambotTransmission2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Torrent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson905adf85DecodeGithubComEsoterickLambotTransmission2(l, v)
}
func easyjson905adf85DecodeGithubComEsoterickLambotTransmission3(in *jlexer.Lexer, out *Request) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "method":
			out.Method = string(in.String())
		case "arguments":
			(out.Arguments).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson905adf85EncodeGithubComEsoterickLambotTransmission3(out *jwriter.Writer, in Request) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"method\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"arguments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Arguments).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Request) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson905adf85EncodeGithubComEsoterickLambotTransmission3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Request) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson905adf85EncodeGithubComEsoterickLambotTransmission3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Request) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson905adf85DecodeGithubComEsoterickLambotTransmission3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Request) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson905adf85DecodeGithubComEsoterickLambotTransmission3(l, v)
}
func easyjson905adf85DecodeGithubComEsoterickLambotTransmission4(in *jlexer.Lexer, out *IDs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ids":
			if in.IsNull() {
				in.Skip()
				out.IDs = nil
			} else {
				in.Delim('[')
				if out.IDs == nil {
					if !in.IsDelim(']') {
						out.IDs = make([]int, 0, 8)
					} else {
						out.IDs = []int{}
					}
				} else {
					out.IDs = (out.IDs)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int
					v4 = int(in.Int())
					out.IDs = append(out.IDs, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson905adf85EncodeGithubComEsoterickLambotTransmission4(out *jwriter.Writer, in IDs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.IDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.IDs {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IDs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson905adf85EncodeGithubComEsoterickLambotTransmission4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IDs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson905adf85EncodeGithubComEsoterickLambotTransmission4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IDs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson905adf85DecodeGithubComEsoterickLambotTransmission4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IDs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson905adf85DecodeGithubComEsoterickLambotTransmission4(l, v)
}
func easyjson905adf85DecodeGithubComEsoterickLambotTransmission5(in *jlexer.Lexer, out *Arguments) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fields":
			if in.IsNull() {
				in.Skip()
				out.Fields = nil
			} else {
				in.Delim('[')
				if out.Fields == nil {
					if !in.IsDelim(']') {
						out.Fields = make([]string, 0, 4)
					} else {
						out.Fields = []string{}
					}
				} else {
					out.Fields = (out.Fields)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Fields = append(out.Fields, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ids":
			(out.IDs).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson905adf85EncodeGithubComEsoterickLambotTransmission5(out *jwriter.Writer, in Arguments) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Fields == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Fields {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.IDs).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Arguments) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson905adf85EncodeGithubComEsoterickLambotTransmission5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Arguments) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson905adf85EncodeGithubComEsoterickLambotTransmission5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Arguments) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson905adf85DecodeGithubComEsoterickLambotTransmission5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Arguments) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson905adf85DecodeGithubComEsoterickLambotTransmission5(l, v)
}
